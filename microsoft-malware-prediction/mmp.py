"""
"""
from keras.models import Model
from keras.layers import Input,Dense, Activation, BatchNormalization, Dropout
from keras import optimizers
from keras import backend as K
from keras.callbacks import EarlyStopping, ModelCheckpoint, ReduceLROnPlateau
from keras.utils import to_categorical
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.model_selection import StratifiedShuffleSplit, KFold
import gc
import tensorflow as tf 
import numpy as np
import pandas as pd
import mmp_preprocessor


def make_neural_network(input_dim):
    input_layer = Input(shape=(input_dim,))
    neural_network = Dense(64, input_dim=45, activation="relu")(input_layer)
    neural_network = BatchNormalization()(neural_network)
    
    neural_network = Dense(64, activation="relu")(neural_network)
    neural_network = Dropout(.2)(neural_network)
    neural_network = BatchNormalization()(neural_network)
    
    neural_network = Dense(512, activation="relu")(neural_network)
    neural_network = Dropout(.2)(neural_network)
    neural_network = BatchNormalization()(neural_network)
    
    neural_network = Dense(512, activation="relu")(neural_network)
    neural_network = Dropout(.2)(neural_network)
    neural_network = BatchNormalization()(neural_network)
    
    neural_network = Dense(1024, activation="relu")(neural_network)
    neural_network = Dropout(.2)(neural_network)
    neural_network = BatchNormalization()(neural_network)
    
    output_layer = Dense(1, activation="sigmoid")(neural_network)
    
    neural_network = Model(input=input_layer, output=output_layer)
    
    optimizer = optimizers.Adam(lr=0.003, beta_1=0.9, beta_2=0.999, epsilon=None, decay=0.0, amsgrad=False)
    
    neural_network.compile(loss="binary_crossentropy", optimizer=optimizer, metrics=["accuracy"])
    print(neural_network.summary())
    return neural_network

def training_standard(x, y, input_dim, epochs=10, batch_size=512):
    
    sss = StratifiedShuffleSplit(n_splits=5,test_size=0.2)
    
    for train_index, cv_index in sss.split(x, y):
        gc.collect()
        x = x.values
        y = y.values
        X_train, X_cv = x[train_index], x[cv_index]
        y_train, y_cv = y[train_index], y[cv_index]
        
        neural_network = make_neural_network(input_dim)
        
        earlyStopping = EarlyStopping(monitor='val_loss', patience=10, verbose=0, mode='min')
        mcp_save = ModelCheckpoint('.mdl_wts.hdf5', save_best_only=True, monitor='val_loss', mode='min')
        reduce_lr_loss = ReduceLROnPlateau(monitor='val_loss', factor=0.1, patience=7, verbose=1, epsilon=1e-4, mode='min')
    
        neural_network.fit(X_train, y_train, epochs=epochs, batch_size=batch_size, 
                                 shuffle=True, callbacks=[earlyStopping, mcp_save, reduce_lr_loss], 
                                 validation_split=0.25)
        
        neural_network.load_weights(filepath = '.mdl_wts.hdf5')
        
        score = neural_network.evaluate(X_cv, y_cv, verbose=2)
        print('CV loss:', score[0])
        print('CV accuracy:', score[1])

        pt = neural_network.predict(X_cv)
        #mse = (np.mean((pt-y_cv)**2))
        #print('CV MSE: ', mse)
        
        return neural_network
    


def main():
    
    dtypes = {
        'MachineIdentifier':                                    'category',
        'ProductName':                                          'category',
        'EngineVersion':                                        'category',
        'AppVersion':                                           'category',
        'AvSigVersion':                                         'category',
        'IsBeta':                                               'int8',
        'RtpStateBitfield':                                     'float16',
        'IsSxsPassiveMode':                                     'int8',
        'DefaultBrowsersIdentifier':                            'float16',
        'AVProductStatesIdentifier':                            'float32',
        'AVProductsInstalled':                                  'float16',
        'AVProductsEnabled':                                    'float16',
        'HasTpm':                                               'int8',
        'CountryIdentifier':                                    'int16',
        'CityIdentifier':                                       'float32',
        'OrganizationIdentifier':                               'float16',
        'GeoNameIdentifier':                                    'float16',
        'LocaleEnglishNameIdentifier':                          'int8',
        'Platform':                                             'category',
        'Processor':                                            'category',
        'OsVer':                                                'category',
        'OsBuild':                                              'int16',
        'OsSuite':                                              'int16',
        'OsPlatformSubRelease':                                 'category',
        'OsBuildLab':                                           'category',
        'SkuEdition':                                           'category',
        'IsProtected':                                          'float16',
        'AutoSampleOptIn':                                      'int8',
        'PuaMode':                                              'category',
        'SMode':                                                'float16',
        'IeVerIdentifier':                                      'float16',
        'SmartScreen':                                          'category',
        'Firewall':                                             'float16',
        'UacLuaenable':                                         'float32',
        'Census_MDC2FormFactor':                                'category',
        'Census_DeviceFamily':                                  'category',
        'Census_OEMNameIdentifier':                             'float16',
        'Census_OEMModelIdentifier':                            'float32',
        'Census_ProcessorCoreCount':                            'float16',
        'Census_ProcessorManufacturerIdentifier':               'float16',
        'Census_ProcessorModelIdentifier':                      'float16',
        'Census_ProcessorClass':                                'category',
        'Census_PrimaryDiskTotalCapacity':                      'float32',
        'Census_PrimaryDiskTypeName':                           'category',
        'Census_SystemVolumeTotalCapacity':                     'float32',
        'Census_HasOpticalDiskDrive':                           'int8',
        'Census_TotalPhysicalRAM':                              'float32',
        'Census_ChassisTypeName':                               'category',
        'Census_InternalPrimaryDiagonalDisplaySizeInInches':    'float16',
        'Census_InternalPrimaryDisplayResolutionHorizontal':    'float16',
        'Census_InternalPrimaryDisplayResolutionVertical':      'float16',
        'Census_PowerPlatformRoleName':                         'category',
        'Census_InternalBatteryType':                           'category',
        'Census_InternalBatteryNumberOfCharges':                'float32',
        'Census_OSVersion':                                     'category',
        'Census_OSArchitecture':                                'category',
        'Census_OSBranch':                                      'category',
        'Census_OSBuildNumber':                                 'int16',
        'Census_OSBuildRevision':                               'int32',
        'Census_OSEdition':                                     'category',
        'Census_OSSkuName':                                     'category',
        'Census_OSInstallTypeName':                             'category',
        'Census_OSInstallLanguageIdentifier':                   'float16',
        'Census_OSUILocaleIdentifier':                          'int16',
        'Census_OSWUAutoUpdateOptionsName':                     'category',
        'Census_IsPortableOperatingSystem':                     'int8',
        'Census_GenuineStateName':                              'category',
        'Census_ActivationChannel':                             'category',
        'Census_IsFlightingInternal':                           'float16',
        'Census_IsFlightsDisabled':                             'float16',
        'Census_FlightRing':                                    'category',
        'Census_ThresholdOptIn':                                'float16',
        'Census_FirmwareManufacturerIdentifier':                'float16',
        'Census_FirmwareVersionIdentifier':                     'float32',
        'Census_IsSecureBootEnabled':                           'int8',
        'Census_IsWIMBootEnabled':                              'float16',
        'Census_IsVirtualDevice':                               'float16',
        'Census_IsTouchEnabled':                                'int8',
        'Census_IsPenCapable':                                  'int8',
        'Census_IsAlwaysOnAlwaysConnectedCapable':              'float16',
        'Wdft_IsGamer':                                         'float16',
        'Wdft_RegionIdentifier':                                'float16',
        'HasDetections':                                        'int8'
        }
    
    
    gc.collect()
    
    input_dim = 25
    chunksize = 100000
    data = pd.read_csv("../../train.csv", nrows=chunksize, dtype=dtypes)
    pca_training_data, training_targets = mmp_preprocessor.preprocess(data, input_dim)
    neural_network = training_standard(pca_training_data, training_targets, input_dim, epochs=100, batch_size=128)
    
    neural_network.save('mmp_pca_80.h5')
    
if __name__ == '__main__':
    main()